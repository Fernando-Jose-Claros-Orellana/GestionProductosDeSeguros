@page "/crear-producto"
@using GestionProductosDeSeguros.BlazorWebAssembly.DataService
@using GestionProductosDeSeguros.DTOs.ProductoDTOs
@using System.ComponentModel.DataAnnotations

@inject ProductoService ProductoService
@inject NavigationManager NavigationManager

<PageTitle>Crear Producto</PageTitle>

<div class="container mt-4">
    <h1 class="text-center mb-4">Crear Nuevo Producto</h1>

    <EditForm Model="@nuevoProducto" OnValidSubmit="@ValidarSumaAsegurada">
        <DataAnnotationsValidator />

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="nombre" class="form-label">Nombre</label>
                <InputText id="nombre" class="form-control" @bind-Value="nuevoProducto.Nombre" />
                <ValidationMessage For="@(() => nuevoProducto.Nombre)" />
            </div>
            <div class="col-md-6">
                <label for="descripcion" class="form-label">Descripción</label>
                <InputTextArea id="descripcion" class="form-control" @bind-Value="nuevoProducto.Descripcion" />
                <ValidationMessage For="@(() => nuevoProducto.Descripcion)" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="tipoProductoId" class="form-label">Tipo de Producto</label>
                <InputSelect id="tipoProductoId" class="form-select" @bind-Value="nuevoProducto.TipoProductoNombre">
                    <option value="">Seleccionar Tipo</option>
                    <option value="Auto">Auto</option>
                    <option value="Salud">Salud</option>
                    <option value="Vida">Vida</option>
                    <option value="Accidentes Personales">Accidentes Personales</option>
                    <option value="Residencial">Residencial</option>
                    <option value="Fianzas">Fianzas</option>
                </InputSelect>
                <ValidationMessage For="@(() => nuevoProducto.TipoProductoNombre)" />
            </div>
            <div class="col-md-6">
                <label for="formaPagoId" class="form-label">Forma de Pago</label>
                <InputSelect id="formaPagoId" class="form-select" @bind-Value="nuevoProducto.FormaPagoNombre">
                    <option value="">Seleccionar Forma de Pago</option>
                    <option value="Mensual">Mensual</option>
                    <option value="Trimestral">Trimestral</option>
                    <option value="Semestral">Semestral</option>
                    <option value="Anual">Anual</option>
                </InputSelect>
                <ValidationMessage For="@(() => nuevoProducto.FormaPagoNombre)" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="primaAnual" class="form-label">Prima Anual</label>
                <InputNumber id="primaAnual" class="form-control" @bind-Value="nuevoProducto.PrimaAnual" />
                <ValidationMessage For="@(() => nuevoProducto.PrimaAnual)" />
            </div>
            <div class="col-md-6">
                <label for="sumaAsegurada" class="form-label">Suma Asegurada</label>
                <InputNumber id="sumaAsegurada" class="form-control" @bind-Value="nuevoProducto.SumaAsegurada" />
                <ValidationMessage For="@(() => nuevoProducto.SumaAsegurada)" />
            </div>
        </div>

        <div class="d-flex justify-content-between">
            <button type="submit" class="btn btn-primary">Guardar</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
        </div>
    </EditForm>
</div>

@code {
    private CrearProductoDTO nuevoProducto = new CrearProductoDTO();
    private string errorMessage;

    private async Task GuardarProducto()
    {
        errorMessage = string.Empty;

        var resultado = await ProductoService.CrearProducto(nuevoProducto);
        if (string.IsNullOrEmpty(resultado)) // Si el resultado es null, indica éxito
        {
            NavigationManager.NavigateTo("/lista-producto");
        }
        else
        {
            errorMessage = "No se puede crear un producto con el mismo nombre y tipo de producto";
            await js.InvokeVoidAsync("alert", errorMessage); // Muestra el mensaje de error
        }
    }

    private async Task ValidarSumaAsegurada()
    {
        if (!nuevoProducto.IsSumaAseguradaValida())
        {
            await js.InvokeVoidAsync("alert", "La suma asegurada debe ser mayor a la prima anual.");
        }
        else
        {
            await GuardarProducto();
        }
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/lista-producto");
    }

    [Inject]
    private IJSRuntime js { get; set; }
}