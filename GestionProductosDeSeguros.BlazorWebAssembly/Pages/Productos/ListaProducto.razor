@page "/lista-producto"
@using GestionProductosDeSeguros.BlazorWebAssembly.DataService
@using GestionProductosDeSeguros.DTOs.ProductoDTOs

@inject ProductoService ProductoService
@inject NavigationManager NavigationManager

<PageTitle>Productos</PageTitle>

<h1>Lista de Productos</h1>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="CrearProducto">Crear</button>
</div>

@if (productos == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Descripción</th>
                <th>Tipo de Producto</th>
                <th>Forma de Pago</th>
                <th>Prima Anual</th>
                <th>Suma Asegurada</th>
                <th>Prima Calculada</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var producto in productos)
            {
                <tr>
                    <td>@producto.Nombre</td>
                    <td>@producto.Descripcion</td>
                    <td>@producto.TipoProductoNombre</td>
                    <td>@producto.FormaPagoNombre</td>
                    <td>@producto.PrimaAnual.ToString("C", new System.Globalization.CultureInfo("en-US"))</td>
                    <td>@producto.SumaAsegurada.ToString("C", new System.Globalization.CultureInfo("en-US"))</td>
                    <td>@producto.PrimaCalculada.ToString("C", new System.Globalization.CultureInfo("en-US"))</td>
                    <td>
                        <div class="btn-group" role="group" aria-label="Acciones">
                            <button class="btn btn-sm btn-info" @onclick="() => VerDetalle(producto.Id)">Detalle</button>
                            <button class="btn btn-sm btn-warning" @onclick="() => EditarProducto(producto.Id)">Editar</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => EliminarProducto(producto.Id)">Eliminar</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ObtenerProductosDTO> productos;

    protected override async Task OnInitializedAsync()
    {
        productos = await ProductoService.ObtenerProductos();
    }

    private void CrearProducto()
    {
        NavigationManager.NavigateTo("/crear-producto");
    }

    private void VerDetalle(int productoId)
    {
        NavigationManager.NavigateTo($"/detalle-producto/{productoId}");
    }

    private void EditarProducto(int productoId)
    {
        NavigationManager.NavigateTo($"/editar-producto/{productoId}");
    }

    private async Task EliminarProducto(int productoId)
    {
        // Aquí deberías agregar una confirmación antes de eliminar
        if (await js.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas eliminar este producto?"))
        {
            var resultado = await ProductoService.EliminarProducto(productoId);
            if (resultado)
            {
                // Recargar la lista de productos después de eliminar
                productos = await ProductoService.ObtenerProductos();
                StateHasChanged(); // Notificar al componente que el estado ha cambiado
            }
            else
            {
                // Manejar el caso en que la eliminación falla (mostrar un mensaje, etc.)
                await js.InvokeVoidAsync("alert", "No se pudo eliminar el producto.");
            }
        }
    }

    // Inyectar el servicio IJSRuntime para usar JavaScript (para la confirmación)
    [Inject]
    private IJSRuntime js { get; set; }
}