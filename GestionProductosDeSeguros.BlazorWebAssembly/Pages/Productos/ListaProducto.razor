@page "/lista-producto"
@using GestionProductosDeSeguros.BlazorWebAssembly.DataService
@using GestionProductosDeSeguros.DTOs.ProductoDTOs

@inject ProductoService ProductoService
@inject NavigationManager NavigationManager

<PageTitle>Productos</PageTitle>

<div class="container mt-4">
    <h1 class="text-center mb-4">Lista de Productos</h1>

    <div class="mb-3 d-flex justify-content-between">
        <div class="flex-grow-1 mr-2">
            <input type="text" @bind="nombreBuscado" placeholder="Buscar por nombre" class="form-control" />
        </div>
        <div>
            <button class="btn btn-primary" @onclick="BuscarProductos">Buscar</button>
            <button class="btn btn-success" @onclick="CrearProducto">Crear Producto</button>
        </div>
    </div>

    @if (productos == null)
    {
        <div class="alert alert-info text-center"><em>Cargando...</em></div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-bordered">
                <thead class="table-light">
                    <tr>
                        <th>Nombre</th>
                        <th>Descripción</th>
                        <th>Tipo de Producto</th>
                        <th>Forma de Pago</th>
                        <th>Prima Anual</th>
                        <th>Suma Asegurada</th>
                        <th>Prima Calculada</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var producto in productos)
                    {
                        <tr>
                            <td>@producto.Nombre</td>
                            <td>@producto.Descripcion</td>
                            <td>@producto.TipoProductoNombre</td>
                            <td>@producto.FormaPagoNombre</td>
                            <td>@producto.PrimaAnual.ToString("C", new System.Globalization.CultureInfo("en-US"))</td>
                            <td>@producto.SumaAsegurada.ToString("C", new System.Globalization.CultureInfo("en-US"))</td>
                            <td>@producto.PrimaCalculada.ToString("C", new System.Globalization.CultureInfo("en-US"))</td>
                            <td>
                                <div class="btn-group" role="group" aria-label="Acciones">
                                    <button class="btn btn-sm btn-info" @onclick="() => VerDetalle(producto.Id)">Detalle</button>
                                    <button class="btn btn-sm btn-warning" @onclick="() => EditarProducto(producto.Id)">Editar</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => EliminarProducto(producto.Id)">Eliminar</button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<BuscarProductosDTO> productos;
    private string nombreBuscado;

    protected override async Task OnInitializedAsync()
    {
        productos = await ProductoService.ObtenerProductos();
    }

    private async Task BuscarProductos()
    {
        productos = await ProductoService.BuscarPorNombre(nombreBuscado);
    }

    private void CrearProducto()
    {
        NavigationManager.NavigateTo("/crear-producto");
    }

    private void VerDetalle(int productoId)
    {
        NavigationManager.NavigateTo($"/detalle-producto/{productoId}");
    }

    private void EditarProducto(int productoId)
    {
        NavigationManager.NavigateTo($"/editar-producto/{productoId}");
    }

    private async Task EliminarProducto(int productoId)
    {
        if (await js.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas eliminar este producto?"))
        {
            var resultado = await ProductoService.EliminarProducto(productoId);
            if (resultado)
            {
                await BuscarProductos(); // Recargar la lista de productos después de eliminar
            }
            else
            {
                await js.InvokeVoidAsync("alert", "No se pudo eliminar el producto.");
            }
        }
    }

    [Inject]
    private IJSRuntime js { get; set; }
}